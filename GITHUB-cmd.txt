COMANDOS GITHUB - POR Dev Aprender (https://www.youtube.com/watch?v=kB5e-gTAl_s&ab_channel=DevAprender)

1 - Instalar git e criar uma conta no GITHUB
	- https://github.com/NilwAugusto
	
2 - Comandos Git
	- O QUE SAO?
		- commits	> versoes do codigo.
		- branch	>(galhos) sao ramificaçoes do codigo que estao sendo criadas em paralelo com o 
		codigo principal geralmente em produçãom. o processo de passar uma "branch" secundaria para
		a master chama-se "merge". sao como codigos stable.
		- push		> atualiza versao (alteraçoes)
		- merge 	> leva uma branch (secundaria) para a outra (main). Para fazer um merge
		vc deve entrar na branch que ira receber as atualizaçoes (main) com o git checkout e merger com
		o git merge staging
		- pull request > o processo de aprovação de outros contribuintes do codigo.
		git ignore 	> lista arquivos e/ou pastas que nao serao incluidas no push.
	
	
	
	- COMANDOS Git
	git init	- inicializa o git na pasta local.
	git status	- mostra status dos arquivos locais.
	git add "nome-do-arquivo" - adiciona arquivo no controle de versoes.
	git add . 	- adiciona todos arquivos que estao Untracked.
	git commit -m "mensagem" - envia o commit com a mensagem descrita.
	git config --global user.email "you@example.com" - configuração git+github.
	git config --global user.name "Your Name"		 - configuração git+github.
	git push	 - envia a versao do codigo para nuvem (github).
	git remote add origin https://github.com/NilwAugusto/DEVOPS22-projeto1-github  - configuração git+github.
	git reflog	- historico de commits.
	git reset --hard id - volta para a versao referente ao ID escolhido.
	git branch	- mostra as branchs criadas.
	git branch staging - cria a branch staging. staging é o nome da branch criada.
	git checkout staging - muda de branch.
	git merge staging	- merge para a branch atual o conteudo da branch staging.
	git pull	- traz as atualizaçoes do servidor para maquina local.
	git checkout -b nome-da-branch master - esse comando cria a branch nome-da-branch, com base na branch master
				e ja loga nela. Seria o git checkout + o git branch nome-da-branch juntos.
	touch .gitignore - cria o arquivo gitignore onde serao listadas pastar e arquivos que nao serao enviados.
	git clone - clona um projeto ou copia para maquina local.			
	

3 - Passos para trabalhar em equipe com git+github (boas praticas).

	1 - git pull da branch principal.
	2 - Gerar uma nova branch partir da branch principal.
	3 - Trabalhar e adicionar novas funcionalidades na branch criada.
	4 - Finalizar o trabalho na branch gerada. 
	5 - git checkout na branch principal. Isso evita que outras atualizaçoes feitas
		por outras pessoas passem despercebidas.
	6 - git pull. Caso outros tenham feito alteraçoes, elas serao baixadas novamente para
		maquina local.
	7 - Mergiar (unir) o codigo da branch em trabalho com a branch principal (depois de testar).
	8 - git push da branch principal.
	
	
	
	FINAL DO CURSO - GIT+GITHUB
	
	
	